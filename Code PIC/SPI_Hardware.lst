CCS PCM C Compiler, Version 5.101, 43599               26-Jun-22 23:43

               Filename:   D:\PIC\Projects\project 1\SPI_Hardware.lst

               ROM used:   533 words (7%)
                           Largest free fragment is 2048
               RAM used:   24 (7%) at main() level
                           37 (10%) worst case
               Stack used: 3 locations (2 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   1DC
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.4
0018:  GOTO   01B
0019:  BTFSC  0B.1
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   02F
.................... #include <16F887.h>
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
.................... 
.................... #list
.................... 
.................... #FUSES NOWDT, HS, NOPROTECT
.................... #use delay(clock=20000000)
*
0036:  MOVLW  39
0037:  MOVWF  04
0038:  BCF    03.7
0039:  MOVF   00,W
003A:  BTFSC  03.2
003B:  GOTO   049
003C:  MOVLW  06
003D:  MOVWF  78
003E:  CLRF   77
003F:  DECFSZ 77,F
0040:  GOTO   03F
0041:  DECFSZ 78,F
0042:  GOTO   03E
0043:  MOVLW  7B
0044:  MOVWF  77
0045:  DECFSZ 77,F
0046:  GOTO   045
0047:  DECFSZ 00,F
0048:  GOTO   03C
0049:  RETURN
.................... 
....................       // DECLARE PLACE
.................... #byte PORTA=0x05
.................... #byte motor_port=0x06
.................... #byte portd=0x08
.................... #byte PORTC=0x07
.................... 
....................  //Declare Pin's function
....................  
....................  //Matrix led
.................... #define CS_Pin       pin_a1
.................... #define MOSI_Pin     pin_a2
.................... #define CLK_Pin      pin_a0
.................... #define POWER_Pin    pin_a3
.................... #define DECODE_MODE  9
.................... #define INTENSITY    10
.................... #define SCAN_LIMIT   11
.................... #define SHUTDOWN     12
.................... #define DISPLAY_TEST 16
.................... 
....................       //GLOBAL VARIABLE PLACE
.................... //Motor
.................... 
.................... //motor move forward
.................... int m1_f=1<<7, m2_f=1<<5, m3_f=1<<3, m4_f=1<<1,
....................    ///motor move backward
....................    m1_b=1<<6, m2_b=1<<4, m3_b=1<< 2, m4_b=1<< 0;
.................... 
.................... int flag =0, trig=0;
.................... 
.................... 
....................          //FUNCTION PLACE
.................... //connect with ledmatrix
.................... void SPI_Write_Byte(unsigned char num);
.................... void send_data(unsigned char address,unsigned char value);
.................... void MAX7219_INIT();
.................... 
.................... 
.................... //display face
.................... void normal_();
.................... void scare();
.................... void funny();
.................... 
.................... //Move car
.................... void go_for( int times);
.................... void go_back(int times);
.................... void turn_left(int times);
.................... void turn_right(int times);
.................... void stop(int times);
.................... 
.................... //Check status
.................... void check_status(int check_times)
.................... {
....................    for (int i=0; i < check_times; i++) 
*
0123:  CLRF   38
0124:  MOVF   37,W
0125:  SUBWF  38,W
0126:  BTFSC  03.0
0127:  GOTO   12D
....................    {
....................       delay_ms(10);
0128:  MOVLW  0A
0129:  MOVWF  39
012A:  CALL   036
012B:  INCF   38,F
012C:  GOTO   124
....................    }
012D:  RETURN
.................... }
.................... 
.................... //setup
.................... void setup();
.................... void setup0()
.................... {
....................    SET_TRIS_D(0);
*
010A:  MOVLW  00
010B:  BSF    03.5
010C:  MOVWF  08
....................    SET_TRIS_C(0b11111111);
010D:  MOVLW  FF
010E:  MOVWF  07
010F:  BCF    03.5
0110:  MOVWF  31
....................    SET_TRIS_B(0);
0111:  MOVLW  00
0112:  BSF    03.5
0113:  MOVWF  06
....................    output_high(POWER_Pin);
0114:  BCF    05.3
0115:  BCF    03.5
0116:  BSF    05.3
....................    portd=~(1<<7);
0117:  MOVLW  7F
0118:  MOVWF  08
....................    portc=0;
0119:  CLRF   07
....................    enable_interrupts(GLOBAL);
011A:  MOVLW  C0
011B:  IORWF  0B,F
....................    enable_interrupts(INT_EXT);
011C:  BSF    0B.4
....................    ext_int_edge(H_to_L);
011D:  BSF    03.5
011E:  BCF    01.6
011F:  BCF    03.5
0120:  BCF    0A.3
0121:  BCF    0A.4
0122:  GOTO   206 (RETURN)
.................... }
.................... 
.................... #INT_EXT
....................    void plus_flag()
....................    {
....................       flag=1;
*
002F:  MOVLW  01
0030:  MOVWF  2F
....................       trig++;
0031:  INCF   30,F
0032:  BCF    0B.1
0033:  BCF    0A.3
0034:  BCF    0A.4
0035:  GOTO   01B
....................    }
....................    
....................    
.................... void main()
*
01DC:  MOVF   03,W
01DD:  ANDLW  1F
01DE:  MOVWF  03
01DF:  MOVLW  80
01E0:  MOVWF  27
01E1:  MOVLW  20
01E2:  MOVWF  28
01E3:  MOVLW  08
01E4:  MOVWF  29
01E5:  MOVLW  02
01E6:  MOVWF  2A
01E7:  MOVLW  40
01E8:  MOVWF  2B
01E9:  MOVLW  10
01EA:  MOVWF  2C
01EB:  MOVLW  04
01EC:  MOVWF  2D
01ED:  MOVLW  01
01EE:  MOVWF  2E
01EF:  CLRF   2F
01F0:  CLRF   30
01F1:  MOVLW  FF
01F2:  MOVWF  31
01F3:  BSF    03.5
01F4:  BSF    03.6
01F5:  MOVF   09,W
01F6:  ANDLW  C0
01F7:  MOVWF  09
01F8:  BCF    03.6
01F9:  BCF    1F.4
01FA:  BCF    1F.5
01FB:  MOVLW  00
01FC:  BSF    03.6
01FD:  MOVWF  08
01FE:  BCF    03.5
01FF:  CLRF   07
0200:  CLRF   08
0201:  CLRF   09
0202:  BCF    03.7
.................... {
....................  
....................    setup();
0203:  BCF    03.6
0204:  GOTO   08C
....................    setup0(); 
0205:  GOTO   10A
....................    for (int i=1; i<9; i++) send_data(i,0b00000000);
0206:  MOVLW  01
0207:  MOVWF  32
0208:  MOVF   32,W
0209:  SUBLW  08
020A:  BTFSS  03.0
020B:  GOTO   212
020C:  MOVF   32,W
020D:  MOVWF  37
020E:  CLRF   38
020F:  CALL   07D
0210:  INCF   32,F
0211:  GOTO   208
....................   
....................    while(1)
....................    { 
....................       normal_();
0212:  GOTO   12E
0213:  GOTO   212
....................       
....................      
....................       
....................    }
.................... }
....................       //CHECK
0214:  SLEEP
.................... 
.................... 
....................       //MOTOR MOVE
.................... void go_for(int times)
.................... {
....................    motor_port=(m1_f|m2_f|m3_f|m4_f);   check_status(times);
.................... }
.................... 
.................... void go_back(int times)
.................... {
....................    motor_port = (m1_b|m2_b|m3_b|m4_b);   check_status(times);
.................... }
.................... 
.................... void turn_left(int times)
.................... {
....................    motor_port = (m1_f|m3_f);   check_status(times);
.................... }
.................... 
.................... void turn_right(int times)
.................... {
....................    motor_port = (m2_f|m4_f);      check_status(times);
.................... }
.................... 
.................... void stop(int times)
.................... {
....................    motor_port =0;    check_status(times);
.................... }
.................... 
.................... void normal_() 
.................... {     
....................       send_data(1,0b11111111); //ve hang 1
*
012E:  MOVLW  01
012F:  MOVWF  37
0130:  MOVLW  FF
0131:  MOVWF  38
0132:  CALL   07D
....................       send_data(8,0b11111111); // hang 8
0133:  MOVLW  08
0134:  MOVWF  37
0135:  MOVLW  FF
0136:  MOVWF  38
0137:  CALL   07D
....................       
....................       for (int i=2; i<8; i++) 
0138:  MOVLW  02
0139:  MOVWF  33
013A:  MOVF   33,W
013B:  SUBLW  07
013C:  BTFSS  03.0
013D:  GOTO   162
....................       {  
....................          switch (i)
013E:  MOVF   33,W
013F:  XORLW  03
0140:  BTFSC  03.2
0141:  GOTO   149
0142:  XORLW  07
0143:  BTFSC  03.2
0144:  GOTO   14F
0145:  XORLW  02
0146:  BTFSC  03.2
0147:  GOTO   155
0148:  GOTO   15B
....................          {
....................             case 3: send_data(i, (0b10000101 ) ); break;
0149:  MOVF   33,W
014A:  MOVWF  37
014B:  MOVLW  85
014C:  MOVWF  38
014D:  CALL   07D
014E:  GOTO   160
....................             case 4: send_data(i, (0b10100001 ) ); break;
014F:  MOVF   33,W
0150:  MOVWF  37
0151:  MOVLW  A1
0152:  MOVWF  38
0153:  CALL   07D
0154:  GOTO   160
....................             case 6: send_data(i, (0b10000101 ) ); break;
0155:  MOVF   33,W
0156:  MOVWF  37
0157:  MOVLW  85
0158:  MOVWF  38
0159:  CALL   07D
015A:  GOTO   160
....................             default: send_data(i, (1 | 1<<7) ); break;           
015B:  MOVF   33,W
015C:  MOVWF  37
015D:  MOVLW  81
015E:  MOVWF  38
015F:  CALL   07D
....................          }                            
0160:  INCF   33,F
0161:  GOTO   13A
....................       }
....................       check_status(10);
0162:  MOVLW  0A
0163:  MOVWF  37
0164:  CALL   123
.................... 
....................       for (int z=1; z<100; z++);
0165:  MOVLW  01
0166:  MOVWF  34
0167:  MOVF   34,W
0168:  SUBLW  63
0169:  BTFSS  03.0
016A:  GOTO   16D
016B:  INCF   34,F
016C:  GOTO   167
....................       for (int i=2; i<8; i++) 
016D:  MOVLW  02
016E:  MOVWF  35
016F:  MOVF   35,W
0170:  SUBLW  07
0171:  BTFSS  03.0
0172:  GOTO   1A0
....................       {  
....................          switch (i)
0173:  MOVF   35,W
0174:  XORLW  03
0175:  BTFSC  03.2
0176:  GOTO   181
0177:  XORLW  07
0178:  BTFSC  03.2
0179:  GOTO   187
017A:  XORLW  01
017B:  BTFSC  03.2
017C:  GOTO   18D
017D:  XORLW  03
017E:  BTFSC  03.2
017F:  GOTO   193
0180:  GOTO   199
....................          {
....................             case 3: send_data(i, (0b10000101 ) ); break;
0181:  MOVF   35,W
0182:  MOVWF  37
0183:  MOVLW  85
0184:  MOVWF  38
0185:  CALL   07D
0186:  GOTO   19E
....................             case 4: send_data(i, (0b10100001 ) ); break;
0187:  MOVF   35,W
0188:  MOVWF  37
0189:  MOVLW  A1
018A:  MOVWF  38
018B:  CALL   07D
018C:  GOTO   19E
....................             case 5: send_data(i, (0b10100001 ) ); break;
018D:  MOVF   35,W
018E:  MOVWF  37
018F:  MOVLW  A1
0190:  MOVWF  38
0191:  CALL   07D
0192:  GOTO   19E
....................             case 6: send_data(i, (0b10000101 ) ); break;
0193:  MOVF   35,W
0194:  MOVWF  37
0195:  MOVLW  85
0196:  MOVWF  38
0197:  CALL   07D
0198:  GOTO   19E
....................             default: send_data(i, (1 | 1<<7) ); break;           
0199:  MOVF   35,W
019A:  MOVWF  37
019B:  MOVLW  81
019C:  MOVWF  38
019D:  CALL   07D
....................          }                            
019E:  INCF   35,F
019F:  GOTO   16F
....................       }
....................       check_status(10);
01A0:  MOVLW  0A
01A1:  MOVWF  37
01A2:  CALL   123
.................... 
....................     
....................      for (int i=2; i<8; i++) 
01A3:  MOVLW  02
01A4:  MOVWF  36
01A5:  MOVF   36,W
01A6:  SUBLW  07
01A7:  BTFSS  03.0
01A8:  GOTO   1D6
....................       {  
....................          switch (i)
01A9:  MOVF   36,W
01AA:  XORLW  03
01AB:  BTFSC  03.2
01AC:  GOTO   1B7
01AD:  XORLW  07
01AE:  BTFSC  03.2
01AF:  GOTO   1BD
01B0:  XORLW  01
01B1:  BTFSC  03.2
01B2:  GOTO   1C3
01B3:  XORLW  03
01B4:  BTFSC  03.2
01B5:  GOTO   1C9
01B6:  GOTO   1CF
....................          {
....................             case 3: send_data(i, (0b10100101 ) ); break;
01B7:  MOVF   36,W
01B8:  MOVWF  37
01B9:  MOVLW  A5
01BA:  MOVWF  38
01BB:  CALL   07D
01BC:  GOTO   1D4
....................             case 4: send_data(i, (0b10100001 ) ); break;
01BD:  MOVF   36,W
01BE:  MOVWF  37
01BF:  MOVLW  A1
01C0:  MOVWF  38
01C1:  CALL   07D
01C2:  GOTO   1D4
....................             case 5: send_data(i, (0b10100001 ) ); break;
01C3:  MOVF   36,W
01C4:  MOVWF  37
01C5:  MOVLW  A1
01C6:  MOVWF  38
01C7:  CALL   07D
01C8:  GOTO   1D4
....................             case 6: send_data(i, (0b10100101 ) ); break;
01C9:  MOVF   36,W
01CA:  MOVWF  37
01CB:  MOVLW  A5
01CC:  MOVWF  38
01CD:  CALL   07D
01CE:  GOTO   1D4
....................             default: send_data(i, (1 | 1<<7) ); break;           
01CF:  MOVF   36,W
01D0:  MOVWF  37
01D1:  MOVLW  81
01D2:  MOVWF  38
01D3:  CALL   07D
....................          }                            
01D4:  INCF   36,F
01D5:  GOTO   1A5
....................       }
....................       check_status(10);
01D6:  MOVLW  0A
01D7:  MOVWF  37
01D8:  CALL   123
01D9:  BCF    0A.3
01DA:  BCF    0A.4
01DB:  GOTO   213 (RETURN)
.................... 
.................... }
.................... 
.................... void scare()
.................... {
....................       send_data(1,0b00111100); send_data(8,0b00111100);
....................       send_data(2,0b01000010);  send_data(7,0b01000010);
....................       
....................        for (int i=3; i<7; i++) 
....................          switch (i)
....................          {
....................             case 3: send_data(i, (0b10100101 ) ); break;
....................             case 4: send_data(i, (0b10010001 ) ); break;
....................             case 5: send_data(i, (0b10010001 ) ); break;
....................             case 6: send_data(i, (0b10100101 ) ); break;
....................             default: send_data(i, (1 | 1<<7) ); break;           
....................          }      
....................       delay_ms(50);
....................       
....................       for (int i=2; i<7; i++) 
....................          switch (i)
....................          {
....................             case 2: send_data(i,  0b01001010);       break;
....................             case 3: send_data(i, (0b10100101 ) ); break;
....................             case 4: send_data(i, (0b10010001 ) ); break;
....................             case 5: send_data(i, (0b10010001 ) ); break;
....................             case 6: send_data(i, (0b10100101 ) ); break;
....................             default: send_data(i, (1 | 1<<7) ); break;           
....................          }      
....................       delay_ms(150);
....................       
....................       for (int i=2; i<7; i++) 
....................          switch (i)
....................          {
....................             case 2: send_data(i,  0b01000010);       break;
....................             case 3: send_data(i, (0b10000101 ) ); break;
....................             case 4: send_data(i, (0b10100001 ) ); break;
.................... //!            case 5: send_data(i, (0b10100001 ) ); break;
....................             case 6: send_data(i, (0b10000101 ) ); break;
....................             default: send_data(i, (1 | 1<<7) ); break;           
....................          }      
....................       delay_ms(100);
....................       
....................       for (int i=3; i<7; i++) 
....................          switch (i)
....................          {
....................             case 3: send_data(i, (0b10000101 ) ); break;
....................             case 4: send_data(i, (0b10100001 ) ); break;
....................             case 5: send_data(i, (0b10100001 ) ); break;
....................             case 6: send_data(i, (0b10000101 ) ); break;
....................             default: send_data(i, (1 | 1<<7) ); break;           
....................          }      
....................       delay_ms(100);
.................... }
.................... 
.................... void funny()
.................... {
....................       send_data(1,0b00111100); send_data(8,0b00111100);
....................       send_data(2,0b01000010);  send_data(7,0b01000010);
....................       
....................        for (int i=2; i<8; i++) 
....................          switch (i)
....................          {
....................             case 2: send_data(i,  0b01010010);  break;
....................             case 3: send_data(i, (0b10100101 ) ); break;
....................             case 4: send_data(i, (0b10100001 ) ); break;
....................             case 5: send_data(i, (0b10100001 ) ); break;
....................             case 6: send_data(i, (0b10100101 ) ); break;
....................             case 7: send_data(i,  0b01010010);  break;          
....................          }      
....................       delay_ms(200);
.................... }      
.................... 
.................... void SPI_Write_Byte(unsigned char num) // gui 1 byte toi slave theo chuan SPI
.................... {
....................     unsigned long t, Mask, Flag;
....................     output_low(CLK_Pin);
*
004A:  BSF    03.5
004B:  BCF    05.0
004C:  BCF    03.5
004D:  BCF    05.0
....................     Mask = 128;
004E:  CLRF   3D
004F:  MOVLW  80
0050:  MOVWF  3C
....................     for (t=0; t<8; t++){
0051:  CLRF   3B
0052:  CLRF   3A
0053:  MOVF   3B,F
0054:  BTFSS  03.2
0055:  GOTO   07C
0056:  MOVF   3A,W
0057:  SUBLW  07
0058:  BTFSS  03.0
0059:  GOTO   07C
....................         Flag = num & Mask;
005A:  MOVF   39,W
005B:  ANDWF  3C,W
005C:  MOVWF  3E
005D:  CLRF   3F
....................         if(Flag == 0) output_low(MOSI_Pin);
005E:  MOVF   3E,F
005F:  BTFSS  03.2
0060:  GOTO   069
0061:  MOVF   3F,F
0062:  BTFSS  03.2
0063:  GOTO   069
0064:  BSF    03.5
0065:  BCF    05.2
0066:  BCF    03.5
0067:  BCF    05.2
0068:  GOTO   06D
....................         else output_high(MOSI_Pin);
0069:  BSF    03.5
006A:  BCF    05.2
006B:  BCF    03.5
006C:  BSF    05.2
....................         output_high(CLK_Pin);
006D:  BSF    03.5
006E:  BCF    05.0
006F:  BCF    03.5
0070:  BSF    05.0
....................         output_low(CLK_Pin);
0071:  BSF    03.5
0072:  BCF    05.0
0073:  BCF    03.5
0074:  BCF    05.0
....................         Mask = Mask >> 1;
0075:  BCF    03.0
0076:  RRF    3D,F
0077:  RRF    3C,F
0078:  INCF   3A,F
0079:  BTFSC  03.2
007A:  INCF   3B,F
007B:  GOTO   053
....................       }
007C:  RETURN
.................... }
.................... 
.................... void send_data(unsigned char address,unsigned char value) // gui thong tin toi slave gom: adress , value
.................... {
....................    output_low(CS_Pin);  // chon slave
007D:  BSF    03.5
007E:  BCF    05.1
007F:  BCF    03.5
0080:  BCF    05.1
....................    SPI_Write_Byte(address);
0081:  MOVF   37,W
0082:  MOVWF  39
0083:  CALL   04A
....................    SPI_Write_Byte(value);
0084:  MOVF   38,W
0085:  MOVWF  39
0086:  CALL   04A
....................    output_high(CS_Pin);       // ket thuc
0087:  BSF    03.5
0088:  BCF    05.1
0089:  BCF    03.5
008A:  BSF    05.1
008B:  RETURN
.................... }
.................... 
.................... 
.................... void setup() // cai dat truoc khi truyen du lieu. nguon tham klhao
.................... {
....................    set_tris_c(0x00); // reset cong C
008C:  MOVLW  00
008D:  BSF    03.5
008E:  MOVWF  07
008F:  BCF    03.5
0090:  MOVWF  31
....................    output_high(pin_c2); // Chon Max7219 lam slave
0091:  BCF    31.2
0092:  MOVF   31,W
0093:  BSF    03.5
0094:  MOVWF  07
0095:  BCF    03.5
0096:  BSF    07.2
....................    delay_ms(100);
0097:  MOVLW  64
0098:  MOVWF  39
0099:  CALL   036
....................    
....................    MAX7219_INIT(); //Khoi dong Max7219
....................    
....................    //Cai dat SPI phu hop voi LED 8x8
....................    send_data(DISPLAY_TEST,0x01);
*
00F0:  MOVLW  10
00F1:  MOVWF  37
00F2:  MOVLW  01
00F3:  MOVWF  38
00F4:  CALL   07D
....................    send_data(DECODE_MODE,0x00);
00F5:  MOVLW  09
00F6:  MOVWF  37
00F7:  CLRF   38
00F8:  CALL   07D
....................    send_data(INTENSITY,0x00);
00F9:  MOVLW  0A
00FA:  MOVWF  37
00FB:  CLRF   38
00FC:  CALL   07D
....................    send_data(SCAN_LIMIT,0x0f);
00FD:  MOVLW  0B
00FE:  MOVWF  37
00FF:  MOVLW  0F
0100:  MOVWF  38
0101:  CALL   07D
....................    send_data(SHUTDOWN,0x01);
0102:  MOVLW  0C
0103:  MOVWF  37
0104:  MOVLW  01
0105:  MOVWF  38
0106:  CALL   07D
0107:  BCF    0A.3
0108:  BCF    0A.4
0109:  GOTO   205 (RETURN)
.................... }
.................... 
.................... void MAX7219_INIT() { //cai dat cau hinh cho MAX7219 
....................   // Tat che do Shutdown
....................   output_low(CS_Pin);              // CS pin is pulled LOW
*
009A:  BSF    03.5
009B:  BCF    05.1
009C:  BCF    03.5
009D:  BCF    05.1
....................   SPI_Write_Byte(0x0C);    // Select Shutdown register
009E:  MOVLW  0C
009F:  MOVWF  39
00A0:  CALL   04A
....................   SPI_Write_Byte(0x01);    // Set D0 bit to return to normal operation
00A1:  MOVLW  01
00A2:  MOVWF  39
00A3:  CALL   04A
....................   output_high(CS_Pin);              // CS pin is pulled HIGH
00A4:  BSF    03.5
00A5:  BCF    05.1
00A6:  BCF    03.5
00A7:  BSF    05.1
.................... 
....................   // Set BCD decode mode for digits DIG0-DIG3
....................   output_low(CS_Pin);              // CS pin is pulled LOW
00A8:  BSF    03.5
00A9:  BCF    05.1
00AA:  BCF    03.5
00AB:  BCF    05.1
....................   SPI_Write_Byte(0x09);    // Select Decode Mode register
00AC:  MOVLW  09
00AD:  MOVWF  39
00AE:  CALL   04A
....................   SPI_Write_Byte(0x0F);    // Select BCD mode for digits DIG0-DIG3
00AF:  MOVLW  0F
00B0:  MOVWF  39
00B1:  CALL   04A
....................   output_high(CS_Pin);              // CS pin is pulled HIGH
00B2:  BSF    03.5
00B3:  BCF    05.1
00B4:  BCF    03.5
00B5:  BSF    05.1
.................... 
....................   // Set display brighness
....................   output_low(CS_Pin);          // CS pin is pulled LOW
00B6:  BSF    03.5
00B7:  BCF    05.1
00B8:  BCF    03.5
00B9:  BCF    05.1
....................   SPI_Write_Byte(0x0A);    // Select Intensity register
00BA:  MOVLW  0A
00BB:  MOVWF  39
00BC:  CALL   04A
....................   SPI_Write_Byte(0x0F);    // Set maximum brightness
00BD:  MOVLW  0F
00BE:  MOVWF  39
00BF:  CALL   04A
....................   output_high(CS_Pin);              // CS pin is pulled HIGH
00C0:  BSF    03.5
00C1:  BCF    05.1
00C2:  BCF    03.5
00C3:  BSF    05.1
.................... 
....................    // Set display refresh
....................   output_low(CS_Pin);              // CS pin is pulled LOW
00C4:  BSF    03.5
00C5:  BCF    05.1
00C6:  BCF    03.5
00C7:  BCF    05.1
....................   SPI_Write_Byte(0x0B);    // Select Scan-Limit register
00C8:  MOVLW  0B
00C9:  MOVWF  39
00CA:  CALL   04A
....................   SPI_Write_Byte(0x03);    // Select digits DIG0-DIG3
00CB:  MOVLW  03
00CC:  MOVWF  39
00CD:  CALL   04A
....................   output_high(CS_Pin);              // CS pin is pulled HIGH
00CE:  BSF    03.5
00CF:  BCF    05.1
00D0:  BCF    03.5
00D1:  BSF    05.1
.................... 
....................  // Enable Display-Test
....................   output_low(CS_Pin); ;              // CS pin is pulled LOW
00D2:  BSF    03.5
00D3:  BCF    05.1
00D4:  BCF    03.5
00D5:  BCF    05.1
....................   SPI_Write_Byte(0x0F);    // Select Display-Test register
00D6:  MOVLW  0F
00D7:  MOVWF  39
00D8:  CALL   04A
....................   SPI_Write_Byte(0x01);    // Enable Display-Test
00D9:  MOVLW  01
00DA:  MOVWF  39
00DB:  CALL   04A
....................   output_high(CS_Pin);              // CS pin is pulled HIGH
00DC:  BSF    03.5
00DD:  BCF    05.1
00DE:  BCF    03.5
00DF:  BSF    05.1
.................... 
....................   Delay_ms(100);
00E0:  MOVLW  64
00E1:  MOVWF  39
00E2:  CALL   036
....................  // Disable Display-Test
....................   output_low(CS_Pin);              // CS pin is pulled LOW
00E3:  BSF    03.5
00E4:  BCF    05.1
00E5:  BCF    03.5
00E6:  BCF    05.1
....................   SPI_Write_Byte(0x0F);    // Select Display-Test register
00E7:  MOVLW  0F
00E8:  MOVWF  39
00E9:  CALL   04A
....................   SPI_Write_Byte(0x00);    // Disable Display-Test
00EA:  CLRF   39
00EB:  CALL   04A
....................   output_high(CS_Pin); ;             // CS pin is pulled HIGH
00EC:  BSF    03.5
00ED:  BCF    05.1
00EE:  BCF    03.5
00EF:  BSF    05.1
.................... 
.................... }
.................... 

Configuration Fuses:
   Word  1: 2FE2   HS NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
